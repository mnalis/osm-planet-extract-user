- benchmark some standard libxml (SAX) line-oriented XML parser
- try if we can use MCE::Grep ?
- add sample scripts to extract tags user by that user, sorted by popularity
- another (slower) script which also fetches whole elements (way/node/relation) which mention specified UIDs
  (perhaps two-step - extract changeset numbers from changesets-xxxxxx.bz2 to a file, and then fetch all those object
  ids from a file? would that be faster? more universal at least)
  That way one can see current history of all elements they ever touched (e.g. if someone else has changed them)
- benchmark other potentially faster solutions, PBF based:
  - https://github.com/b-r-u/osmpbf
  - https://github.com/woltapp/parallelpbf
  - https://github.com/simplexspatial/osm4scala
  - https://github.com/hove-io/libosmpbfreader
- use Hyperscan, https://github.com/intel/hyperscan.git (see stats.txt for significant speed improvements)
  in C or in perl? see:
  - https://metacpan.org/pod/Hyperscan
  - https://www.intel.com/content/www/us/en/developer/articles/training/why-and-how-to-replace-pcre-with-hyperscan.html
  - in Debian: see libhyperscan-dev / libvectorscan-dev
- maybe rewrite in C with hyperscan for even more speed (perl is slow even in dummy 'perl -n' loop, see stats.txt compared to e.g. `wc -l`)
- add README.md
